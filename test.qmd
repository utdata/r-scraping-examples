---
title: "testing"
---

```{r}
#| label: setup
#| message: false
#| warning: false

library(tidyverse)
library(janitor)
library(rvest)
library(httr2)
```

Get html 

```{r}
# url <- "https://planestrategico.conl.mx/indicadores/detalle/ods/242/datos?page"
url <- "https://planestrategico.conl.mx/indicadores/detalle/ods/242/datos?page=2"

html <- read_html(url)
```



```{r}
tables <- html |> html_table()

tables[[1]]

tables |> _[[1]]
```

## Function to parse page


```{r}
parse_page <- function(our_url) {
  our_url |> 
    read_html() |> 
    html_table() |> _[[1]] |> 
    clean_names()
}

# We test this by feeding it the url variable we also used above
parse_page(url)
```

## Get and combine the pages


```{r}
# This range has to be valid. See how many pages are in the table
i <- 1:39

# This creates a list of urls based on that range
urls <- str_glue("https://planestrategico.conl.mx/indicadores/detalle/ods/242/datos?page={i}")

# This takes that list of urls and then runs our parse_page() function on each one.
# The result is a list tibbles, i.e., a table from each page
requests <- map(urls, parse_page)

# list_rbind is a special function that binds a list of tibbles into a single one
combined_table_data <- requests |> list_rbind()

# here we just peek at the table

combined_table <- combined_table_data |> mutate(source = "climate")
```


```{r}
# This range has to be valid. See how many pages are in the table
i <- 1:7

# This creates a list of urls based on that range
urls <- str_glue("https://planestrategico.conl.mx/indicadores/detalle/ods/934/datos?page={i}")

# This takes that list of urls and then runs our parse_page() function on each one.
# The result is a list tibbles, i.e., a table from each page
requests <- map(urls, parse_page)

# list_rbind is a special function that binds a list of tibbles into a single one
water_insecurity_data <- requests |> list_rbind()

# here we just peek at the table

water_insecurity <- water_insecurity_data |>
  mutate(source = "water_insecurity")

water_insecurity
```




combine the dat

```{r}
all_the_data <- bind_rows(combined_table, water_insecurity)

all_the_data
```

```{r}
all_the_data |> filter(source == "water_insecurity") |> 
  arrange(valor) |> 
  group_by(ano) |>
  mutate(rank = min_rank(valor)) |> 
  arrange(rank)
```



```{r}
all_the_data |> 
  ggplot(aes(y = unidad_geografica_str, x = valor, group = source)) +
  geom_line(aes(color = source))
```

